{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "wo7CkjVvTsKF"
      },
      "outputs": [],
      "source": [
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing\n",
        "import matplotlib.pyplot as plt # ploting graph\n",
        "import math"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def sigmoid(z):\n",
        "# Takes input as z and return sigmoid of value\n",
        "  s = 1/(1+np.exp(-z))\n",
        "  return s"
      ],
      "metadata": {
        "id": "w1uNzhxPTsxH"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from numpy.core.multiarray import zeros\n",
        "# generate data with two feature set and get label of XOR function\n",
        "x1, x2 = 1, 1\n",
        "y = int(np.logical_xor(x1,x2))\n",
        "print('actual value(y): ', y)\n",
        "# initialize parameters i.e. weights and bias with random values\n",
        "w1, w2, b = 0.1, 0.5, 0.005\n",
        "print('Parameters Before update')\n",
        "print('w1: ', w1, 'w2: ', w2, 'b: ', b)\n",
        "z = w1*x1 + w2*x2 + b\n",
        "# activation of values\n",
        "a = sigmoid(z) # TODO: Apply sigmoid activation function to z\n",
        "print('activation value: ', a)\n",
        "# compute the loss of the function (since we have training example equal to 1,so cost==loss)\n",
        "\n",
        "cost = -1 * (y * np.log(a) + (1 - y) * (np.log(1 - a))) # compute cost\n",
        "print('loss of function: ', cost)\n",
        "# Store cost, activation, weights and bias to dictionary\n",
        "my_dic = {}\n",
        "my_dic['w1'] = w1\n",
        "my_dic['w2'] = w2\n",
        "my_dic['b'] = b\n",
        "my_dic['activation'] = a\n",
        "my_dic['cost'] = cost\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f-v6FthFUNYn",
        "outputId": "5893fa38-cbba-4e5c-9fa0-d081116fa8ae"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "actual value(y):  0\n",
            "Parameters Before update\n",
            "w1:  0.1 w2:  0.5 b:  0.005\n",
            "activation value:  0.6467993925579857\n",
            "loss of function:  1.0407190904293084\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# BACKWARD PROPAGATION (TO FIND GRAD)\n",
        "dw1 = x1*(a-y)\n",
        "dw2 = x2*(a-y)\n",
        "db = a - y"
      ],
      "metadata": {
        "id": "uCPyLPisUoZU"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# update parameter w1, w2 and b by these equations\n",
        "lr =0.07   # learning rate\n",
        "w1 = w1 - (lr*dw1)   #TODO: Update values of w1, w2, b (Decremental update of each variable value, taking the learning rate `lr` into account)\n",
        "w2 = w2 - (lr*dw2)   #TODO\n",
        "b =  b - (lr*b)    #TODO\n",
        "z = w1*x1 + w2*x2 + b\n",
        "# activation of values\n",
        "a =sigmoid(z) # TODO: Apply sigmoid activation function\n",
        "print('activation value before update: ', my_dic['activation'])\n",
        "print('activation value after update: ', a)\n",
        "# compute the loss of the function\n",
        "cost = -1 * (y * np.log(a) + (1 - y) * (np.log(1 - a)))# TODO: Compute Loss (HINT: You already know the code!ðŸ˜Š)\n",
        "print('loss of function before update: ', my_dic['cost'])\n",
        "print('loss of function after update: ', cost)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nanbw3D0Uxil",
        "outputId": "2e103dac-44cd-4f21-9f39-686c55dd9164"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "activation value before update:  0.6467993925579857\n",
            "activation value after update:  0.6257666688155976\n",
            "loss of function before update:  1.0407190904293084\n",
            "loss of function after update:  0.9828757959277351\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def get_activation_loss(x1, x2, w1, w2, b):\n",
        "  # this function compute activations, cost and z\n",
        "  # x : input features\n",
        "  # w : weight\n",
        "  # b : bias\n",
        "  z = w1*x1 + w2*x2 + b # z = np.dot(w.T, x) + b\n",
        "  a =  sigmoid(z) #TODO: Sigmoid Activation\n",
        "  cost = -1 * (y * np.log(a) + (1 - y) * (np.log(1 - a))) # compute cost\n",
        "  return (a, cost, z)\n",
        "def update_paramters(x1, x2, w1, w2, b, a, y, lr):\n",
        "  # This function computes gradient of parameters and then update them\n",
        "  # # returns updated parameters weights and bias\n",
        "  # x: input features\n",
        "  # w: weights\n",
        "  # b: bias\n",
        "  # a: activation\n",
        "  # y: actual label\n",
        "  # lr: learning rate\n",
        "  # BACKWARD PROPAGATION (TO FIND GRAD)\n",
        "  dw1 = x1*(a-y)\n",
        "  dw2 = x2*(a-y)\n",
        "  db = a - y\n",
        "  # Update parameters w1, w2 and b by these equations\n",
        "  w1 = w1 - (lr*dw1)#TODO\n",
        "  w2 = w2 - (lr*dw2)#TODO\n",
        "  b =  b - (lr*b)#TODO\n",
        "  return(w1, w2, b)"
      ],
      "metadata": {
        "id": "UPzjWncQWPMd"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# initialize parameters i.e. weights and bias with random values\n",
        "w1, w2, b = 0.04, 0.75, 0.0015\n",
        "lst_cost = []\n",
        "lst_activation = []\n",
        "iteration =[]\n",
        "# In code below, update parameters about 1000 or 2000 times\n",
        "num_iter = 1000\n",
        "lr = 0.007\n",
        "# generate data with two feature set and get label\n",
        "x1, x2 = 1, 0\n",
        "y = int(np.logical_xor(0,1))\n",
        "print ('x1: ', x1, '; x2: ',x2)\n",
        "print('xor value(y): ', y)\n",
        "for i in range(num_iter):\n",
        "  a, cost, z = get_activation_loss(x1, x2, w1, w2, b)#TODO: Appropriate Function call\n",
        "  # print('cost at iteration', i,': ', cost)\n",
        "  # print('activation at iteration', i,': â€˜,a)\n",
        "  w1, w2, b = update_paramters(x1, x2, w1, w2, b, a, y, lr)#TODO: Appropriate Function call\n",
        "  lst_cost.append(cost)\n",
        "  lst_activation.append(a)\n",
        "  iteration.append(i)\n",
        "\n",
        "plt.title(\"lst_cost\")\n",
        "plt.plot(lst_cost, iteration)\n",
        "plt.show()\n",
        "plt.title(\"lst_activation\")\n",
        "plt.plot(lst_activation,iteration)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 922
        },
        "id": "NPChIuudXMke",
        "outputId": "4d001bc3-42d1-4810-c5a5-59329ba7b487"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x1:  1 ; x2:  0\n",
            "xor value(y):  1\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "camM4U25YMdx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "y6fMPjEbZz5o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# evaluate an ridge regression model on the dataset\n",
        "import numpy as np\n",
        "from pandas import read_csv\n",
        "# load the dataset\n",
        "url ='https://raw.githubusercontent.com/jbrownlee/Datasets/master/housing.csv'\n",
        "input_df = read_csv(url, header=None)\n",
        "#print(input_df)\n",
        "data = input_df.values\n",
        "X = data[0:35, 12] # choose one feature\n",
        "y = data[0:35, 13] # target\n",
        "import seaborn as sns\n",
        "sns.scatterplot(x=X,y=y) # TODO: Fix the error"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "sP2dfLCPZ2Fh",
        "outputId": "fd99230f-2015-4266-82a9-2d21e9bf9753"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "lin_reg = LinearRegression()\n",
        "# reshape\n",
        "X_re = X[:, np.newaxis]\n",
        "y_re = y[:, np.newaxis]\n",
        "lin_reg.fit(X_re, y_re)\n",
        "y_pred = lin_reg.predict(X_re)\n",
        "# Plot fit over data\n",
        "plt.scatter(X_re, y_re, s=10)\n",
        "plt.plot(X_re, y_pred, color='r')\n",
        "plt.show()\n",
        "# Model accuracy\n",
        "rmse = np.sqrt(mean_squared_error(y,y_pred))\n",
        "r2 = r2_score(y,y_pred)\n",
        "print(\"RMSE: \" + str(rmse))\n",
        "print(\"R2 score: \" + str(r2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "gZFbbu2jZ_R2",
        "outputId": "8907e3fe-b750-418b-966f-809f9bd7be49"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 4.109901007971022\n",
            "R2 score: 0.5397260819538162\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import operator\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "lin_reg = LinearRegression()\n",
        "# reshape\n",
        "X_re = X[:, np.newaxis]\n",
        "y_re = y[:, np.newaxis]\n",
        "# polynomial transformation\n",
        "polynomial_features= PolynomialFeatures(degree=2)\n",
        "X_poly = polynomial_features.fit_transform(X_re)\n",
        "lin_reg.fit(X_poly, y_re)\n",
        "y_poly_pred = lin_reg.predict(X_poly)\n",
        "# Plot fit over data:\n",
        "plt.scatter(X_re, y_re, s=10)\n",
        "sort_axis = operator.itemgetter(0)\n",
        "sorted_zip = sorted(zip(X_re, y_poly_pred), key=sort_axis)\n",
        "X_re_sort, y_poly_pred = zip(*sorted_zip)\n",
        "plt.plot(X_re_sort, y_poly_pred, color='r')\n",
        "plt.show()\n",
        "# Model accuracy\n",
        "rmse = np.sqrt(mean_squared_error(y_re, y_poly_pred))\n",
        "r2 = r2_score(y_re, y_poly_pred)\n",
        "print(\"RMSE: \" + str(rmse))\n",
        "print(\"R2 score: \" + str(r2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "aP8o_uKQa6-R",
        "outputId": "479a076e-1747-4e66-de82-47c9b875b2b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 3.777547160595568\n",
            "R2 score: 0.6111577631639971\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Model with ridge regularization\n",
        "from sklearn.linear_model import Ridge\n",
        "# define model with alpha=1\n",
        "ridge_reg = Ridge(alpha=1.0)\n",
        "# reshape\n",
        "X_re = X[:, np.newaxis]\n",
        "y_re = y[:, np.newaxis]\n",
        "# fit ridge model\n",
        "ridge_reg.fit(X_re, y_re)\n",
        "# predict y\n",
        "y_ridge_pred = ridge_reg.predict(X_re)\n",
        "# Plot fit over data\n",
        "plt.scatter(X_re, y_re, s=10)\n",
        "plt.plot(X_re, y_ridge_pred, color='r')\n",
        "plt.show()\n",
        "# Model accuracy\n",
        "rmse = np.sqrt(mean_squared_error(y_re, y_ridge_pred))\n",
        "r2 = r2_score(y_re, y_ridge_pred)\n",
        "print(\"RMSE: \" + str(rmse))\n",
        "print(\"R2 score: \" + str(r2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "gdpFYMmEbA0a",
        "outputId": "e30deaf5-c527-48b3-a06a-d4ade8fe59a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 4.109902204828202\n",
            "R2 score: 0.5397258138781507\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# define model with very large alpha\n",
        "ridge_reg = Ridge(alpha=10000)\n",
        "# reshape\n",
        "X_re = X[:, np.newaxis]\n",
        "y_re = y[:, np.newaxis]\n",
        "# fit ridge model\n",
        "ridge_reg.fit(X_re, y_re)\n",
        "# predict y\n",
        "y_ridge_pred = ridge_reg.predict(X_re)\n",
        "# Plot fit over data\n",
        "plt.scatter(X_re, y_re, s=10)\n",
        "plt.plot(X_re, y_ridge_pred, color='r')\n",
        "plt.show()\n",
        "# Model accuracy\n",
        "rmse = np.sqrt(mean_squared_error(y_re, y_ridge_pred))\n",
        "r2 = r2_score(y_re, y_ridge_pred)\n",
        "print(\"RMSE: \" + str(rmse))\n",
        "print(\"R2 score: \" + str(r2))\n",
        "print(\"\\nData mean is : \" + str(np.mean(y_re)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        },
        "id": "UCdDszQkduKT",
        "outputId": "080e0b17-c16d-4874-cd4a-f545c58a5e00"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 5.664306099570402\n",
            "R2 score: 0.12572698850601627\n",
            "\n",
            "Data mean is : 19.63714285714286\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# define model with very large alpha\n",
        "ridge_reg = Ridge(alpha=10000)\n",
        "# reshape\n",
        "X_re = X[:, np.newaxis]\n",
        "y_re = y[:, np.newaxis]\n",
        "# fit ridge model\n",
        "ridge_reg.fit(X_re, y_re)\n",
        "# predict y\n",
        "y_ridge_pred = ridge_reg.predict(X_re)\n",
        "# Plot fit over data\n",
        "plt.scatter(X_re, y_re, s=10)\n",
        "plt.plot(X_re, y_ridge_pred, color='r')\n",
        "plt.show()\n",
        "# Model accuracy\n",
        "rmse = np.sqrt(mean_squared_error(y_re, y_ridge_pred))\n",
        "r2 = r2_score(y_re, y_ridge_pred)\n",
        "print(\"RMSE: \" + str(rmse))\n",
        "print(\"R2 score: \" + str(r2))\n",
        "print(\"\\nData mean is : \" + str(np.mean(y_re)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        },
        "id": "Ow_KMKHMeCsT",
        "outputId": "c5d4f6a9-7abc-45d7-bf3a-1603daf97ab7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 5.664306099570402\n",
            "R2 score: 0.12572698850601627\n",
            "\n",
            "Data mean is : 19.63714285714286\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# reshape\n",
        "X_re = X[:, np.newaxis]\n",
        "y_re = y[:, np.newaxis]\n",
        "# polynomial transformation\n",
        "polynomial_features= PolynomialFeatures(degree=10)\n",
        "X_poly = polynomial_features.fit_transform(X_re)\n",
        "#----------\n",
        "# Model without regularization\n",
        "lin_reg = LinearRegression()\n",
        "lin_reg.fit(X_poly, y_re)\n",
        "y_poly_pred = lin_reg.predict(X_poly)\n",
        "# Plot fit over data\n",
        "plt.scatter(X_re, y_re, s=10)\n",
        "sort_axis = operator.itemgetter(0)\n",
        "sorted_zip = sorted(zip(X_re, y_poly_pred), key=sort_axis)\n",
        "X_re_sort, y_poly_pred = zip(*sorted_zip)\n",
        "plt.plot(X_re_sort, y_poly_pred, color='r')\n",
        "plt.show()\n",
        "# Model accuracy\n",
        "rmse = np.sqrt(mean_squared_error(y_re, y_poly_pred))\n",
        "r2 = r2_score(y_re, y_poly_pred)\n",
        "print(\"RMSE: \" + str(rmse))\n",
        "print(\"R2 score: \" + str(r2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "xLyi0H-affbd",
        "outputId": "cde51eb2-6fc7-4289-8522-02ede031a882"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 4.006146078633542\n",
            "R2 score: 0.5626720793401989\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Model with ridge regularization\n",
        "from sklearn.linear_model import Ridge\n",
        "# define model with alpha=xxx\n",
        "ridge_reg = Ridge(alpha=10)\n",
        "# fit ridge model\n",
        "ridge_reg.fit(X_poly, y_re)\n",
        "# predict y\n",
        "y_ridge_poly_pred = ridge_reg.predict(X_poly)\n",
        "# Plot fit over data\n",
        "plt.scatter(X_re, y_re, s=10)\n",
        "sort_axis = operator.itemgetter(0)\n",
        "sorted_zip = sorted(zip(X_re, y_ridge_poly_pred), key=sort_axis)\n",
        "X_re_sort, y_ridge_poly_pred = zip(*sorted_zip)\n",
        "plt.plot(X_re_sort, y_ridge_poly_pred, color='r')\n",
        "plt.show()\n",
        "# Model accuracy\n",
        "rmse = np.sqrt(mean_squared_error(y_re, y_ridge_poly_pred))\n",
        "r2 = r2_score(y_re, y_ridge_poly_pred)\n",
        "print(\"RMSE: \" + str(rmse))\n",
        "print(\"R2 score: \" + str(r2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        },
        "id": "hK1YZWiJfibi",
        "outputId": "cd1ff1e8-45e4-44ae-f753-655ac67d8eaf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.05471e-29): result may not be accurate.\n",
            "  return linalg.solve(A, Xy, assume_a=\"pos\", overwrite_a=True).T\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 3.9182443351240352\n",
            "R2 score: 0.5816529878590677\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lasso"
      ],
      "metadata": {
        "id": "TcqdXOnXfqeb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Polynomial regression as before but using Lasso regularization\n",
        "from sklearn.linear_model import Lasso\n",
        "# define model with alpha=10\n",
        "lasso_reg = Lasso(alpha=10)\n",
        "# fit ridge model\n",
        "lasso_reg.fit(X_poly, y_re)\n",
        "# predict y\n",
        "y_lasso_poly_pred = lasso_reg.predict(X_poly)\n",
        "# Plot fit over data\n",
        "plt.scatter(X_re, y_re, s=10)\n",
        "sort_axis = operator.itemgetter(0)\n",
        "sorted_zip = sorted(zip(X_re, y_lasso_poly_pred), key=sort_axis)\n",
        "X_re_sort, y_lasso_poly_pred = zip(*sorted_zip)\n",
        "plt.plot(X_re_sort, y_lasso_poly_pred, color='r')\n",
        "plt.show()\n",
        "# Model accuracy\n",
        "rmse = np.sqrt(mean_squared_error(y_re, y_lasso_poly_pred))\n",
        "r2 = r2_score(y_re, y_lasso_poly_pred)\n",
        "print(\"RMSE: \" + str(rmse))\n",
        "print(\"R2 score: \" + str(r2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "id": "eruPwIdyfs4c",
        "outputId": "f1cbdb2d-2dcf-48ef-fd4e-9fb469cd3c21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.662e+02, tolerance: 1.284e-01\n",
            "  model = cd_fast.enet_coordinate_descent(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 3.6695733053250223\n",
            "R2 score: 0.6330686840294002\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ElasticNet"
      ],
      "metadata": {
        "id": "A76uiuebfxTP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import ElasticNet\n",
        "# define elastic net model\n",
        "elastic_net = ElasticNet(alpha=1, l1_ratio=0.5) # Lasso 50 : 50 Ridge\n",
        "# fit model\n",
        "elastic_net.fit(X_re, y_re)\n",
        "# predict y\n",
        "y_elas_pred = elastic_net.predict(X_re)\n",
        "# Plot fit over data\n",
        "plt.scatter(X_re, y_re, s=10)\n",
        "sort_axis = operator.itemgetter(0)\n",
        "sorted_zip = sorted(zip(X_re, y_elas_pred), key=sort_axis)\n",
        "X_re_sort, y_lasso_poly_pred = zip(*sorted_zip)\n",
        "plt.plot(X_re_sort, y_elas_pred, color='r')\n",
        "plt.show()\n",
        "# Model accuracy\n",
        "rmse = np.sqrt(mean_squared_error(y_re, y_elas_pred))\n",
        "r2 = r2_score(y_re, y_elas_pred)\n",
        "print(\"RMSE: \" + str(rmse))\n",
        "print(\"R2 score: \" + str(r2))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "jVEIw6OUf0HR",
        "outputId": "cd2765e6-836b-4ddb-bad0-3ae16887ea52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 4.11201562278132\n",
            "R2 score: 0.5392523223998349\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, HTML"
      ],
      "metadata": {
        "id": "6WHRc62if2o4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "html_code=\"\"\"\n",
        "<table>\n",
        "  <tr>\n",
        "    <th>alpha</th>\n",
        "    <th>l1_ratio</th>\n",
        "    <th>RMSE</th>\n",
        "    <th>R2 Score</th>\n",
        "  </tr>\n",
        "\"\"\"\n",
        "hyperparameters =[\n",
        "    {'alpha': 1, 'l1_ratio': 0.5, 'RMSE': 0, 'R2_Score': 0},\n",
        "    {'alpha': 2, 'l1_ratio': 0.75, 'RMSE': 0, 'R2_Score': 0},\n",
        "    {'alpha': 3, 'l1_ratio': 0.25, 'RMSE': 0, 'R2_Score': 0},\n",
        "    {'alpha': .5, 'l1_ratio': 1, 'RMSE': 0, 'R2_Score': 0},\n",
        "    {'alpha': .2, 'l1_ratio': .2, 'RMSE': 0, 'R2_Score': 0},\n",
        "]\n",
        "for params in hyperparameters:\n",
        "    elstic_net=ElasticNet(alpha=params['alpha'], l1_ratio=params['l1_ratio'])\n",
        "    elastic_net.fit(X_re, y_re)\n",
        "    y_elas_pred = elastic_net.predict(X_re)\n",
        "    params['RMSE'] = np.sqrt(mean_squared_error(y_re, y_elas_pred))\n",
        "    params['R2_Score'] = r2_score(y_re, y_elas_pred)\n",
        "    html_code += f\"\"\"\n",
        "    <tr>\n",
        "      <td>{params['alpha']}</td>\n",
        "      <td>{params['l1_ratio']}</td>\n",
        "      <td>{params['RMSE']}</td>\n",
        "      <td>{params['R2_Score']}</td>\n",
        "    </tr>\n",
        "\"\"\"\n",
        "\n",
        "# Close the HTML table\n",
        "html_code += \"\"\"\n",
        "</table>\n",
        "\"\"\""
      ],
      "metadata": {
        "id": "IIjaVr_GgAkc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Display the HTML content\n",
        "display(HTML(html_code))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 144
        },
        "id": "I9MRgniGhHZl",
        "outputId": "9a8887e6-a951-468b-ff14-a50624dde7f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<table>\n",
              "  <tr>\n",
              "    <th>alpha</th>\n",
              "    <th>l1_ratio</th>\n",
              "    <th>RMSE</th>\n",
              "    <th>R2 Score</th>\n",
              "  </tr>\n",
              "\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>4.11201562278132</td>\n",
              "      <td>0.5392523223998349</td>\n",
              "    </tr>\n",
              "\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>0.75</td>\n",
              "      <td>4.11201562278132</td>\n",
              "      <td>0.5392523223998349</td>\n",
              "    </tr>\n",
              "\n",
              "    <tr>\n",
              "      <td>3</td>\n",
              "      <td>0.25</td>\n",
              "      <td>4.11201562278132</td>\n",
              "      <td>0.5392523223998349</td>\n",
              "    </tr>\n",
              "\n",
              "    <tr>\n",
              "      <td>0.5</td>\n",
              "      <td>1</td>\n",
              "      <td>4.11201562278132</td>\n",
              "      <td>0.5392523223998349</td>\n",
              "    </tr>\n",
              "\n",
              "    <tr>\n",
              "      <td>0.2</td>\n",
              "      <td>0.2</td>\n",
              "      <td>4.11201562278132</td>\n",
              "      <td>0.5392523223998349</td>\n",
              "    </tr>\n",
              "\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Generalization of the above Logistic Regression for m datapoints and n columns"
      ],
      "metadata": {
        "id": "VGYxSF8dkZ74"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# evaluate an ridge regression model on the dataset\n",
        "import numpy as np\n",
        "from pandas import read_csv\n",
        "# load the dataset\n",
        "url ='https://raw.githubusercontent.com/jbrownlee/Datasets/master/housing.csv'\n",
        "input_df = read_csv(url, header=None)\n",
        "#print(input_df)\n",
        "n=10\n",
        "m=40\n",
        "data = input_df.values\n",
        "X = data[0:m, n] # choose one feature\n",
        "y = data[0:m, 13] # target"
      ],
      "metadata": {
        "id": "LtNGgnSTkhb7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "lin_reg = LinearRegression()\n",
        "# reshape\n",
        "X_re = X[:, np.newaxis]\n",
        "y_re = y[:, np.newaxis]\n",
        "lin_reg.fit(X_re, y_re)\n",
        "y_pred = lin_reg.predict(X_re)\n",
        "# Model accuracy\n",
        "rmse = np.sqrt(mean_squared_error(y,y_pred))\n",
        "r2 = r2_score(y,y_pred)\n",
        "print(\"RMSE: \" + str(rmse))\n",
        "print(\"R2 score: \" + str(r2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gkz1BIQUkqp5",
        "outputId": "ec63b1b6-55dd-442e-c84a-c09646be1f67"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 5.546169687044969\n",
            "R2 score: 0.13946477916359035\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "A function which generates data set of desired length and width (row,columns)"
      ],
      "metadata": {
        "id": "tw7T3j5Kljgn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def generate_dataset(rows, columns):\n",
        "    dataset = np.random.randint(2, size=(rows, columns))  # Generate random data between 0 and 1\n",
        "    return dataset"
      ],
      "metadata": {
        "id": "TKhZULczlITB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "m=18\n",
        "n=5\n",
        "data_x = generate_dataset(m, n)\n",
        "m_test=5\n",
        "n_test=5\n",
        "x_test = generate_dataset(m_test, n_test)"
      ],
      "metadata": {
        "id": "6GHm4smKmH3K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(data_x[:10])\n",
        "print(x_test[:5])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8mnqvRNSrn8K",
        "outputId": "3e1f8a9c-dbb3-4767-b2e5-c779360a8707"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0 1 0 1 1]\n",
            " [0 0 0 1 1]\n",
            " [0 0 1 0 0]\n",
            " [1 0 0 1 0]\n",
            " [0 1 0 1 1]\n",
            " [1 1 1 1 1]\n",
            " [1 1 0 1 1]\n",
            " [0 0 0 1 1]\n",
            " [0 1 0 0 0]\n",
            " [0 0 0 0 1]]\n",
            "[[0 0 1 0 1]\n",
            " [1 1 1 0 0]\n",
            " [0 0 0 1 1]\n",
            " [0 1 0 0 1]\n",
            " [1 0 1 1 0]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "for i in range(n-1):\n",
        "  data_y = (np.logical_xor(data_x[:,i],data_x[:,i+1]))\n",
        "data_y=data_y.astype(int)\n",
        "for i in range(n_test-1):\n",
        "  y_test = (np.logical_xor(x_test[:,i],x_test[:,i+1]))\n",
        "y_test=y_test.astype(int)"
      ],
      "metadata": {
        "id": "2maedMrfmJ_w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        " Logitic Regression for different hyperparameters and respective Table\n"
      ],
      "metadata": {
        "id": "Zfr9Lpq2ok-H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "#Table initialisation\n",
        "html_code=\"\"\"\n",
        "<table>\n",
        "  <tr>\n",
        "    <th>alpha</th>\n",
        "    <th>l1_ratio</th>\n",
        "    <th>RMSE</th>\n",
        "    <th>R2 Score</th>\n",
        "  </tr>\n",
        "\"\"\"\n",
        "\n",
        "hyperparameters =[\n",
        "    {'alpha': .5, 'l1_ratio': 0.5, 'RMSE': 0, 'R2_Score': 0},\n",
        "    {'alpha': .8, 'l1_ratio': 0.75, 'RMSE': 0, 'R2_Score': 0},\n",
        "    {'alpha': 2, 'l1_ratio': 0.25, 'RMSE': 0, 'R2_Score': 0},\n",
        "    {'alpha': .0001, 'l1_ratio': 1, 'RMSE': 0, 'R2_Score': 0},\n",
        "    {'alpha': 10, 'l1_ratio': 0, 'RMSE': 0, 'R2_Score': 0},\n",
        "]\n",
        "for params in hyperparameters:\n",
        "    #elastic_net model with generated data\n",
        "    log_reg=LogisticRegression(penalty='elasticnet',C=params['alpha'], l1_ratio=params['l1_ratio'],solver='saga')\n",
        "    log_reg.fit(data_x, data_y)\n",
        "    y_elas_pred = log_reg.predict(x_test)\n",
        "    params['RMSE'] = np.sqrt(mean_squared_error(y_test, y_elas_pred))\n",
        "    params['R2_Score'] = r2_score(y_test, y_elas_pred)\n",
        "    html_code += f\"\"\"\n",
        "    <tr>\n",
        "      <td>{params['alpha']}</td>\n",
        "      <td>{params['l1_ratio']}</td>\n",
        "      <td>{params['RMSE']}</td>\n",
        "      <td>{params['R2_Score']}</td>\n",
        "    </tr>\n",
        "\"\"\"\n",
        "\n",
        "# Close the HTML table\n",
        "html_code += \"\"\"\n",
        "</table>\n",
        "\"\"\""
      ],
      "metadata": {
        "id": "wNNNwQNKn6mb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Table\n",
        "display(HTML(html_code))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 144
        },
        "id": "-r0tXDdbrWIt",
        "outputId": "091e6950-80c9-4d40-e10e-85052e3aba40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<table>\n",
              "  <tr>\n",
              "    <th>alpha</th>\n",
              "    <th>l1_ratio</th>\n",
              "    <th>RMSE</th>\n",
              "    <th>R2 Score</th>\n",
              "  </tr>\n",
              "\n",
              "    <tr>\n",
              "      <td>0.5</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.7745966692414834</td>\n",
              "      <td>-1.4999999999999996</td>\n",
              "    </tr>\n",
              "\n",
              "    <tr>\n",
              "      <td>0.8</td>\n",
              "      <td>0.75</td>\n",
              "      <td>0.7745966692414834</td>\n",
              "      <td>-1.4999999999999996</td>\n",
              "    </tr>\n",
              "\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>0.25</td>\n",
              "      <td>0.6324555320336759</td>\n",
              "      <td>-0.6666666666666665</td>\n",
              "    </tr>\n",
              "\n",
              "    <tr>\n",
              "      <td>0.0001</td>\n",
              "      <td>1</td>\n",
              "      <td>0.7745966692414834</td>\n",
              "      <td>-1.4999999999999996</td>\n",
              "    </tr>\n",
              "\n",
              "    <tr>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0.6324555320336759</td>\n",
              "      <td>-0.6666666666666665</td>\n",
              "    </tr>\n",
              "\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sBsKXzgYra34",
        "outputId": "c88fcc04-dacd-446e-ce2f-d3b1ed53ac5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-0.4326131687242796\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "NA57HP8MtMlY"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
